AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation template for an HA ETCD cluster with NLB integration,
  using an Auto Scaling Group on Amazon Linux 2.

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC where resources will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs for the Auto Scaling group

  AMIId:
    Type: AWS::EC2::Image::Id
    Description: Amazon Linux 2 (HVM), SSD Volume Type
    Default: ami-07c33d2197ac9fe9c

  EtcdInstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type for ETCD
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  EtcdDesiredCapacity:
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3
      - 5
    Description: Desired number of ETCD EC2 instances in the Auto Scaling group

Resources:
  EtcdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ETCD cluster
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        # Allow client communication on port 2379
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2379
          CidrIp: 0.0.0.0/0
        # Allow peer communication on port 2380
        - IpProtocol: tcp
          FromPort: 2380
          ToPort: 2380
          CidrIp: 0.0.0.0/0
        # Allow SSH access (22) for debugging
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EtcdSecurityGroup

  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # 기본 SSM 접근 권한
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser

        # 필요 시 추가
        # - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
        # - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        # - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
        # - arn:aws:iam::aws:policy/AmazonSSMFullAccess

      Path: "/"
      Tags:
        - Key: Name
          Value: ManagedInstanceRole

  ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ManagedInstanceRole
      InstanceProfileName: !Sub "${AWS::StackName}-InstanceProfile"

  EtcdLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-EtcdLaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref AMIId
        InstanceType: !Ref EtcdInstanceType
        IamInstanceProfile:
          Arn: !GetAtt ManagedInstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref EtcdSecurityGroup

        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

            amazon-linux-extras install docker -y
            systemctl enable docker
            systemctl start docker

            docker run  \
              --rm --name etcd \
              --publish 2379:2379 \
              --publish 2380:2380 \
              --env ALLOW_NONE_AUTHENTICATION=yes \
              --env ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 \
              --env ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 \
              bitnami/etcd:latest

  EtcdAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref EtcdLaunchTemplate
        Version: !GetAtt EtcdLaunchTemplate.LatestVersionNumber
      MinSize: !Ref EtcdDesiredCapacity
      MaxSize: !Ref EtcdDesiredCapacity
      DesiredCapacity: !Ref EtcdDesiredCapacity

      # Target Group에 자동 등록
      TargetGroupARNs:
        - !Ref EtcdTargetGroup

      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Etcd-ASG-Instance"
          PropagateAtLaunch: true

  EtcdTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-EtcdTG"
      TargetType: instance
      Protocol: TCP
      Port: 2379
      VpcId: !Ref VPCId
      HealthCheckProtocol: TCP
      HealthCheckEnabled: true
      HealthCheckPort: 2379
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EtcdTargetGroup"

  EtcdLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-EtcdNLB"
      Type: network
      Subnets: !Ref SubnetIds
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EtcdNLB"

  EtcdListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EtcdLoadBalancer
      Protocol: TCP
      Port: 2379
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EtcdTargetGroup

Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the Network Load Balancer
    Value: !GetAtt EtcdLoadBalancer.DNSName

  TargetGroupARN:
    Description: ARN of the Target Group
    Value: !Ref EtcdTargetGroup

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref EtcdAutoScalingGroup
